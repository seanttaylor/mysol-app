!(function () {
  const a = function (a) { for (var b, c = document.querySelectorAll('a'); a && a !== document; a = a.parentNode) for (b = c.length; b--;) if (c[b] === a) return a; }; const b = function (b) { const c = a(b.target); return c && c.hash ? document.querySelector(c.hash) : void 0; }; window.addEventListener('touchend', (a) => { const c = b(a); c && (c && c.classList.contains('modal') && c.classList.toggle('active'), a.preventDefault()); });
}()), !(function () {
  let a; const b = function (a) { for (var b, c = document.querySelectorAll('a'); a && a !== document; a = a.parentNode) for (b = c.length; b--;) if (c[b] === a) return a; }; var c = function () { a.style.display = 'none', a.removeEventListener('webkitTransitionEnd', c); }; var d = (function () { const b = document.createElement('div'); return b.classList.add('backdrop'), b.addEventListener('touchend', () => { a.addEventListener('webkitTransitionEnd', c), a.classList.remove('visible'), a.parentNode.removeChild(d); }), b; }()); const e = function (c) { const d = b(c.target); if (d && d.hash && !(d.hash.indexOf('/') > 0)) { try { a = document.querySelector(d.hash); } catch (e) { a = null; } if (a !== null && a && a.classList.contains('popover')) return a; } }; const f = function (a) { const b = e(a); b && (b.style.display = 'block', b.offsetHeight, b.classList.add('visible'), b.parentNode.appendChild(d)); }; window.addEventListener('touchend', f);
}()), !(function () {
  let a; const b = function () {}; const c = 20; const d = sessionStorage; const e = {}; const f = { slideIn: 'slide-out', slideOut: 'slide-in', fade: 'fade' }; const g = {
    bartab: '.bar-tab', barnav: '.bar-nav', barfooter: '.bar-footer', barheadersecondary: '.bar-header-secondary',
  }; const h = function (a, b) { o.id = a.id, b && (a = k(a.id)), d[a.id] = JSON.stringify(a), window.history.replaceState(a.id, a.title, a.url), e[a.id] = document.body.cloneNode(!0); }; const i = function () { const a = o.id; const b = JSON.parse(d.cacheForwardStack || '[]'); const e = JSON.parse(d.cacheBackStack || '[]'); for (e.push(a); b.length;) delete d[b.shift()]; for (;e.length > c;) delete d[e.shift()]; window.history.pushState(null, '', d[o.id].url), d.cacheForwardStack = JSON.stringify(b), d.cacheBackStack = JSON.stringify(e); }; const j = function (a, b) { const c = b === 'forward'; const e = JSON.parse(d.cacheForwardStack || '[]'); const f = JSON.parse(d.cacheBackStack || '[]'); const g = c ? f : e; const h = c ? e : f; o.id && g.push(o.id), h.pop(), d.cacheForwardStack = JSON.stringify(e), d.cacheBackStack = JSON.stringify(f); }; var k = function (a) { return JSON.parse(d[a] || null) || {}; }; const l = function (b) { const c = t(b.target); if (!(!c || b.which > 1 || b.metaKey || b.ctrlKey || a || location.protocol !== c.protocol || location.host !== c.host || !c.hash && /#/.test(c.href) || c.hash && c.href.replace(c.hash, '') === location.href.replace(location.hash, '') || c.getAttribute('data-ignore') === 'push')) return c; }; const m = function (a) {
    const b = l(a); b && (a.preventDefault(), o({
      url: b.href, hash: b.hash, timeout: b.getAttribute('data-timeout'), transition: b.getAttribute('data-transition'),
    }));
  }; const n = function (a) {
    let b; let c; let h; let i; let l; let m; let n; let p; const q = a.state; if (q && d[q]) {
      if (l = o.id < q ? 'forward' : 'back', j(q, l), h = k(q), i = e[q], h.title && (document.title = h.title), l === 'back' ? (n = JSON.parse(l === 'back' ? d.cacheForwardStack : d.cacheBackStack), p = k(n[n.length - 1])) : p = h, l === 'back' && !p.id) return o.id = q; if (m = l === 'back' ? f[p.transition] : p.transition, !i) {
        return o({
          id: h.id, url: h.url, title: h.title, timeout: h.timeout, transition: m, ignorePush: !0,
        });
      } if (p.transition) { h = v(h, '.content', i.cloneNode(!0)); for (b in g)g.hasOwnProperty(b) && (c = document.querySelector(g[b]), h[b] ? r(h[b], c) : c && c.parentNode.removeChild(c)); }r((h.contents || i).cloneNode(!0), document.querySelector('.content'), m), o.id = q, document.body.offsetHeight;
    }
  }; var o = function (a) {
    let c; let d = o.xhr; a.container = a.container || a.transition ? document.querySelector('.content') : document.body; for (c in g)g.hasOwnProperty(c) && (a[c] = a[c] || document.querySelector(g[c])); d && d.readyState < 4 && (d.onreadystatechange = b, d.abort()), d = new XMLHttpRequest(), d.open('GET', a.url, !0), d.setRequestHeader('X-PUSH', 'true'), d.onreadystatechange = function () { a._timeout && clearTimeout(a._timeout), d.readyState === 4 && (d.status === 200 ? p(d, a) : q(a.url)); }, o.id || h({
      id: +new Date(), url: window.location.href, title: document.title, timeout: a.timeout, transition: null,
    }), a.timeout && (a._timeout = setTimeout(() => { d.abort('timeout'); }, a.timeout)), d.send(), d.readyState && !a.ignorePush && i();
  }; var p = function (a, b) {
    let c; let d; const e = w(a, b); if (!e.contents) return u(b.url); if (e.title && (document.title = e.title), b.transition) for (c in g)g.hasOwnProperty(c) && (d = document.querySelector(g[c]), e[c] ? r(e[c], d) : d && d.parentNode.removeChild(d)); r(e.contents, b.container, b.transition, () => {
      h({
        id: b.id || +new Date(), url: e.url, title: e.title, timeout: b.timeout, transition: b.transition,
      }, b.id), s();
    }), !b.ignorePush && window._gaq && _gaq.push(['_trackPageview']), !b.hash;
  }; var q = function (a) { throw new Error(`Could not get: ${a}`); }; var r = function (a, b, c, d) { let e; let f; let g; if (c ? (e = /in$/.test(c), c === 'fade' && (b.classList.add('in'), b.classList.add('fade'), a.classList.add('fade')), /slide/.test(c) && (a.classList.add('sliding-in', e ? 'right' : 'left'), a.classList.add('sliding'), b.classList.add('sliding')), b.parentNode.insertBefore(a, b)) : b ? b.innerHTML = a.innerHTML : a.classList.contains('content') ? document.body.appendChild(a) : document.body.insertBefore(a, document.querySelector('.content')), c || d && d(), c === 'fade') { b.offsetWidth, b.classList.remove('in'); var h = function () { b.removeEventListener('webkitTransitionEnd', h), a.classList.add('in'), a.addEventListener('webkitTransitionEnd', i); }; var i = function () { a.removeEventListener('webkitTransitionEnd', i), b.parentNode.removeChild(b), a.classList.remove('fade'), a.classList.remove('in'), d && d(); }; b.addEventListener('webkitTransitionEnd', h); } if (/slide/.test(c)) { var j = function () { a.removeEventListener('webkitTransitionEnd', j), a.classList.remove('sliding', 'sliding-in'), a.classList.remove(g), b.parentNode.removeChild(b), d && d(); }; b.offsetWidth, g = e ? 'right' : 'left', f = e ? 'left' : 'right', b.classList.add(f), a.classList.remove(g), a.addEventListener('webkitTransitionEnd', j); } }; var s = function () { const a = new CustomEvent('push', { detail: { state: k(o.id) }, bubbles: !0, cancelable: !0 }); window.dispatchEvent(a); }; var t = function (a) { for (var b, c = document.querySelectorAll('a'); a && a !== document; a = a.parentNode) for (b = c.length; b--;) if (c[b] === a) return a; }; var u = function (a) { window.history.replaceState(null, '', '#'), window.location.replace(a); }; var v = function (a, b, c) { let d; const e = {}; for (d in a)a.hasOwnProperty(d) && (e[d] = a[d]); return Object.keys(g).forEach((a) => { const b = c.querySelector(g[a]); b && b.parentNode.removeChild(b), e[a] = b; }), e.contents = c.querySelector(b), e; }; var w = function (a, b) { let c; let d; let e = {}; const f = a.responseText; if (e.url = b.url, !f) return e; /<html/i.test(f) ? (c = document.createElement('div'), d = document.createElement('div'), c.innerHTML = f.match(/<head[^>]*>([\s\S.]*)<\/head>/i)[0], d.innerHTML = f.match(/<body[^>]*>([\s\S.]*)<\/body>/i)[0]) : (c = d = document.createElement('div'), c.innerHTML = f), e.title = c.querySelector('title'); const g = 'innerText' in e.title ? 'innerText' : 'textContent'; return e.title = e.title && e.title[g].trim(), b.transition ? e = v(e, '.content', d) : e.contents = d, e; }; window.addEventListener('touchstart', () => { a = !1; }), window.addEventListener('touchmove', () => { a = !0; }), window.addEventListener('touchend', m), window.addEventListener('click', (a) => { l(a) && a.preventDefault(); }), window.addEventListener('popstate', n), window.PUSH = o;
}()), !(function () {
  const a = function (a) { for (var b, c = document.querySelectorAll('.segmented-control .control-item'); a && a !== document; a = a.parentNode) for (b = c.length; b--;) if (c[b] === a) return a; }; window.addEventListener('touchend', (b) => { let c; let d; let e; const f = a(b.target); const g = 'active'; const h = `.${g}`; if (f && (c = f.parentNode.querySelector(h), c && c.classList.remove(g), f.classList.add(g), f.hash && (e = document.querySelector(f.hash)))) { d = e.parentNode.querySelectorAll(h); for (let i = 0; i < d.length; i++)d[i].classList.remove(g); e.classList.add(g); } }), window.addEventListener('click', (b) => { a(b.target) && b.preventDefault(); });
}()), !(function () {
  let a; let b; let c; let d; let e; let f; let g; let h; let i; let j; let k; let l; let m; const n = function (a) { for (var b, c = document.querySelectorAll('.slider > .slide-group'); a && a !== document; a = a.parentNode) for (b = c.length; b--;) if (c[b] === a) return a; }; const o = function () { if ('webkitTransform' in c.style) { const a = c.style.webkitTransform.match(/translate3d\(([^,]*)/); const b = a ? a[1] : 0; return parseInt(b, 10); } }; const p = function (a) { const b = a ? d < 0 ? 'ceil' : 'floor' : 'round'; k = Math[b](o() / (m / c.children.length)), k += a, k = Math.min(k, 0), k = Math.max(-(c.children.length - 1), k); }; const q = function (f) { if (c = n(f.target)) { const k = c.querySelector('.slide'); m = k.offsetWidth * c.children.length, l = void 0, j = c.offsetWidth, i = 1, g = -(c.children.length - 1), h = +new Date(), a = f.touches[0].pageX, b = f.touches[0].pageY, d = 0, e = 0, p(0), c.style['-webkit-transition-duration'] = 0; } }; const r = function (h) { h.touches.length > 1 || !c || (d = h.touches[0].pageX - a, e = h.touches[0].pageY - b, a = h.touches[0].pageX, b = h.touches[0].pageY, typeof l === 'undefined' && (l = Math.abs(e) > Math.abs(d)), l || (f = d / i + o(), h.preventDefault(), i = k === 0 && d > 0 ? a / j + 1.25 : k === g && d < 0 ? Math.abs(a) / j + 1.25 : 1, c.style.webkitTransform = `translate3d(${f}px,0,0)`)); }; const s = function (a) { c && !l && (p(+new Date() - h < 1e3 && Math.abs(d) > 15 ? d < 0 ? -1 : 1 : 0), f = k * j, c.style['-webkit-transition-duration'] = '.2s', c.style.webkitTransform = `translate3d(${f}px,0,0)`, a = new CustomEvent('slide', { detail: { slideNumber: Math.abs(k) }, bubbles: !0, cancelable: !0 }), c.parentNode.dispatchEvent(a)); }; window.addEventListener('touchstart', q), window.addEventListener('touchmove', r), window.addEventListener('touchend', s);
}()), !(function () {
  let a = {}; let b = !1; let c = !1; let d = !1; const e = function (a) { for (var b, c = document.querySelectorAll('.toggle'); a && a !== document; a = a.parentNode) for (b = c.length; b--;) if (c[b] === a) return a; }; window.addEventListener('touchstart', (c) => { if (c = c.originalEvent || c, d = e(c.target)) { const f = d.querySelector('.toggle-handle'); const g = d.clientWidth; const h = f.clientWidth; const i = d.classList.contains('active') ? g - h : 0; a = { pageX: c.touches[0].pageX - i, pageY: c.touches[0].pageY }, b = !1; } }), window.addEventListener('touchmove', (e) => { if (e = e.originalEvent || e, !(e.touches.length > 1) && d) { const f = d.querySelector('.toggle-handle'); const g = e.touches[0]; const h = d.clientWidth; const i = f.clientWidth; const j = h - i; if (b = !0, c = g.pageX - a.pageX, !(Math.abs(c) < Math.abs(g.pageY - a.pageY))) { if (e.preventDefault(), c < 0) return f.style.webkitTransform = 'translate3d(0,0,0)'; if (c > j) return f.style.webkitTransform = `translate3d(${j}px,0,0)`; f.style.webkitTransform = `translate3d(${c}px,0,0)`, d.classList[c > h / 2 - i / 2 ? 'add' : 'remove']('active'); } } }), window.addEventListener('touchend', (a) => { if (d) { const e = d.querySelector('.toggle-handle'); const f = d.clientWidth; const g = e.clientWidth; const h = f - g; const i = !b && !d.classList.contains('active') || b && c > f / 2 - g / 2; e.style.webkitTransform = i ? `translate3d(${h}px,0,0)` : 'translate3d(0,0,0)', d.classList[i ? 'add' : 'remove']('active'), a = new CustomEvent('toggle', { detail: { isActive: i }, bubbles: !0, cancelable: !0 }), d.dispatchEvent(a), b = !1, d = !1; } });
}());
